{"version":3,"sources":["components/DataTable/DataTable.js","utils/firebaseUtils.js","services/FirebaseService.js","utils/urlUtils.js","components/Welcome/Welcome.js","components/App/TopBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["DataTable","data","Fragment","variant","component","selectable","Table","map","item","index","key","temperatura","umidade","cliente","firebaseDatabase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","FirebaseService","getDataList","nodePath","callback","size","query","ref","limitToLast","on","dataSnapshot","items","forEach","childSnapshot","val","push","urls","home","name","path","add","Welcome","Object","values","url","raised","props","to","TopBar","position","color","aria-label","type","theme","createMuiTheme","palette","primary","red","App","state","dataReceived","setState","Card","style","margin","CardContent","exact","render","Add","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gWAGaA,EAAY,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACvB,OAAO,kBAAC,IAAMC,SAAP,KACH,kBAAC,IAAD,CAAYC,QAAQ,WAAWC,UAAU,MAAzC,WACA,kBAAC,IAAD,CAAOC,YAAY,GACf,kBAACC,EAAA,UAAD,KACI,kBAACA,EAAA,SAAD,KACI,kBAACA,EAAA,UAAD,YACA,kBAACA,EAAA,UAAD,oBACA,kBAACA,EAAA,UAAD,iBACA,kBAACA,EAAA,UAAD,eACA,kBAACA,EAAA,UAAD,eAGR,kBAACA,EAAA,UAAD,KAEQL,EAAKM,KAAI,SAACC,EAAMC,GAAP,OACL,kBAACH,EAAA,SAAD,CAAUI,IAAKD,GACX,kBAACH,EAAA,UAAD,KAAYE,EAAKE,KACjB,kBAACJ,EAAA,UAAD,KACKE,EAAKG,aAEV,kBAACL,EAAA,UAAD,KAAYE,EAAKI,SACjB,kBAACN,EAAA,UAAD,KAAYE,EAAKK,SACjB,kBAACP,EAAA,UAAD,KAAYE,EAAKP,c,kBCZhCa,GADeC,IAASC,cAXtB,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIaT,IAASU,YCZpBC,E,kCAAAA,EACVC,YAAc,SAACC,EAAUC,GAAyB,IAAfC,EAAc,uDAAP,GAEzCC,EAAQjB,EAAiBkB,IAAIJ,GACLK,YAAYH,GAWxC,OAVAC,EAAMG,GAAG,SAAS,SAAAC,GACd,IAAIC,EAAQ,GACZD,EAAaE,SAAQ,SAAAC,GACjB,IAAI9B,EAAO8B,EAAcC,MACzB/B,EAAI,IAAU8B,EAAc5B,IAC5B0B,EAAMI,KAAKhC,MAEfqB,EAASO,MAGNL,G,8BCjBFU,EAAO,CAChBC,KAAM,CAAEC,KAAM,OAAQC,KAAK,KAC3B3C,KAAM,CAAE0C,KAAM,OAAQC,KAAK,SAC3BC,IAAM,CAAEF,KAAM,MAAQC,KAAK,S,QCElBE,EAAU,WACrB,OACE,kBAAC,IAAM5C,SAAP,KACE,kBAAC,IAAD,CAAYC,QAAQ,WAAWC,UAAU,MAAzC,WAGC2C,OAAOC,OAAOP,GAAMlC,KAAI,SAAC0C,EAAKxC,GAC7B,OACE,kBAAC,IAAD,CACEyC,QAAM,EACNxC,IAAKD,EACLL,UAAW,SAAC+C,GAAD,OAAW,kBAAC,IAAD,eAAMC,GAAIH,EAAIL,MAAUO,MAE7CF,EAAIN,W,2BCZJU,EAAS,kBACpB,kBAAC,IAAD,CAAQC,SAAS,UACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,UACNC,aAAW,OACXpD,UAAW,SAAC+C,GAAD,OAAW,kBAAC,IAAD,eAAMC,GAAIX,EAAKC,KAAKE,MAAUO,MAEpD,kBAAC,IAAD,OAGF,kBAAC,IAAD,CAAYM,KAAK,QAAQF,MAAM,WAA/B,2BCDAG,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAASC,OA+CEC,E,4MA3CbC,MAAQ,CACN/D,KAAM,I,kEAGa,IAAD,OAClByB,EAAgBC,YAAY,YAAY,SAACsC,GAAD,OACtC,EAAKC,SAAS,CAAEjE,KAAMgE,S,+BAGhB,IAAD,OACP,OACE,kBAAC,mBAAD,CAAkBP,MAAOA,GACvB,kBAAC,IAAMxD,SAAP,KACE,kBAAC,EAAD,MACA,kBAACiE,EAAA,EAAD,CAAMC,MAAO,CAAEC,OAAQ,SACrB,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACL3B,KAAMH,EAAKC,KAAKE,KAChB4B,OAAQ,SAACrB,GAAD,OAAW,kBAAC,EAAYA,MAGlC,kBAAC,IAAD,CACEoB,OAAK,EACL3B,KAAMH,EAAKxC,KAAK2C,KAChB4B,OAAQ,SAACrB,GAAD,OACN,kBAAC,EAAD,iBAAeA,EAAf,CAAsBlD,KAAM,EAAK+D,MAAM/D,WAI3C,kBAAC,IAAD,CACEsE,OAAK,EACL3B,KAAMH,EAAKI,IAAID,KACf4B,OAAQ,SAACrB,GAAD,OAAW,kBAACsB,EAAA,IAAQtB,c,GAlC1BuB,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASR,OACP,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO5B,KAAMH,EAAKC,KAAKE,KAAMxC,UAAW2D,KAE1CkB,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e628d5d5.chunk.js","sourcesContent":["import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow, Typography} from \"material-ui\";\n\nexport const DataTable = ({data}) => {\n    return <React.Fragment>\n        <Typography variant=\"headline\" component=\"h2\">Add New</Typography>\n        <Table selectable={false}>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Key</TableCell>\n                    <TableCell>Temperature</TableCell>\n                    <TableCell>Humidity</TableCell>\n                    <TableCell>Client</TableCell>\n                    <TableCell>Data</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    data.map((item, index) =>\n                        <TableRow key={index}>\n                            <TableCell>{item.key}</TableCell>\n                            <TableCell>\n                                {item.temperatura}\n                            </TableCell>\n                            <TableCell>{item.umidade}</TableCell>\n                            <TableCell>{item.cliente}</TableCell>\n                            <TableCell>{item.data}</TableCell>\n                        </TableRow>\n                    )\n                }\n            </TableBody>\n        </Table>\n    </React.Fragment>\n};","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyAsDLYC5k1C7ZJTr_LrXyfYg36Gs-vhZ5A\",\n    authDomain: \"react-app-d7c03.firebaseapp.com\",\n    databaseURL: \"https://react-app-d7c03.firebaseio.com\",\n    projectId: \"react-app-d7c03\",\n    storageBucket: \"react-app-d7c03.appspot.com\",\n    messagingSenderId: \"569433591058\",\n    appId: \"1:569433591058:web:35e11e06b52b904a1477cb\",\n    measurementId: \"G-FYFF9WV1Y3\"\n};\n\nexport const firebaseImpl = firebase.initializeApp(config);\nexport const firebaseDatabase = firebase.database();","import {firebaseDatabase} from '../utils/firebaseUtils'\n\nexport default class FirebaseService {\n    static getDataList = (nodePath, callback, size = 10) => {\n\n        let query = firebaseDatabase.ref(nodePath)\n                                   .limitToLast(size);\n        query.on('value', dataSnapshot => {\n            let items = [];\n            dataSnapshot.forEach(childSnapshot => {\n                let item = childSnapshot.val();\n                item['key'] = childSnapshot.key;\n                items.push(item);\n            });\n            callback(items);\n        });\n\n        return query;\n    };\n\n}","export const urls = {\n    home: { name: 'Home', path:'/'},\n    data: { name: 'Data', path:'/data'},\n    add:  { name: 'Add',  path:'/add'},\n};","import { urls } from \"../../utils/urlUtils\";\nimport { Button, Typography } from \"material-ui\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Welcome = () => {\n  return (\n    <React.Fragment>\n      <Typography variant=\"headline\" component=\"h2\">\n        Welcome\n      </Typography>\n      {Object.values(urls).map((url, index) => {\n        return (\n          <Button\n            raised\n            key={index}\n            component={(props) => <Link to={url.path} {...props} />}\n          >\n            {url.name}\n          </Button>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n","import { urls } from \"../../utils/urlUtils\";\nimport { AppBar, IconButton, Toolbar, Typography } from \"material-ui\";\nimport MenuIcon from \"material-ui-icons/Menu\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const TopBar = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"Menu\"\n        component={(props) => <Link to={urls.home.path} {...props} />}\n      >\n        <MenuIcon />\n      </IconButton>\n\n      <Typography type=\"title\" color=\"inherit\">\n        My Awesome React App\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { MuiThemeProvider } from \"material-ui/styles/index\";\nimport { AppBar, Toolbar, Typography } from \"material-ui\";\nimport { createMuiTheme } from \"material-ui/styles\";\nimport red from \"material-ui/colors/red\";\nimport { DataTable } from \"../DataTable/DataTable\";\nimport FirebaseService from \"../../services/FirebaseService\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { urls } from \"../../utils/urlUtils\";\nimport { Welcome } from \"../Welcome/Welcome\";\nimport { Add } from \"../Add/Add\";\nimport { TopBar } from \"./TopBar\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: red,\n  },\n});\nclass App extends Component {\n  state = {\n    data: [],\n  };\n\n  componentDidMount() {\n    FirebaseService.getDataList(\"leituras\", (dataReceived) =>\n      this.setState({ data: dataReceived })\n    );\n  }\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <React.Fragment>\n          <TopBar />\n          <Card style={{ margin: \"50px\" }}>\n            <CardContent>\n              <Route\n                exact\n                path={urls.home.path}\n                render={(props) => <Welcome {...props} />}\n              />\n\n              <Route\n                exact\n                path={urls.data.path}\n                render={(props) => (\n                  <DataTable {...props} data={this.state.data} />\n                )}\n              />\n\n              <Route\n                exact\n                path={urls.add.path}\n                render={(props) => <Add {...props} />}\n              />\n            </CardContent>\n          </Card>\n        </React.Fragment>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {urls} from \"./utils/urlUtils\";\n\nReactDOM.render(\n  <Router>\n      <Route path={urls.home.path} component={App}/>\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}