{"version":3,"sources":["utils/firebaseUtils.js","services/FirebaseService.js","utils/urlUtils.js","components/DataTable/DataTable.js","components/Welcome/Welcome.js","components/Add/Add.js","components/App/TopBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["firebaseDatabase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","FirebaseService","getDataList","nodePath","callback","size","query","ref","limitToLast","on","dataSnapshot","items","forEach","childSnapshot","item","val","key","push","pushData","node","objToSubmit","id","set","remove","urls","home","name","path","data","add","privateUrls","pathWithouParam","DataTable","Fragment","variant","component","selectable","Table","map","index","temperatura","umidade","cliente","onClick","props","to","Welcome","Object","values","url","raised","Add","state","componentWillMount","match","params","undefined","setState","getUniqueDataBy","console","log","submit","event","preventDefault","updateData","history","handleChange","target","value","render","onSubmit","className","type","label","required","onChange","style","marginTop","display","Component","withRouter","TopBar","position","color","aria-label","theme","createMuiTheme","palette","primary","red","App","dataReceived","Card","margin","CardContent","exact","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c00d560.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyAsDLYC5k1C7ZJTr_LrXyfYg36Gs-vhZ5A\",\n    authDomain: \"react-app-d7c03.firebaseapp.com\",\n    databaseURL: \"https://react-app-d7c03.firebaseio.com\",\n    projectId: \"react-app-d7c03\",\n    storageBucket: \"react-app-d7c03.appspot.com\",\n    messagingSenderId: \"569433591058\",\n    appId: \"1:569433591058:web:35e11e06b52b904a1477cb\",\n    measurementId: \"G-FYFF9WV1Y3\"\n};\n\nexport const firebaseImpl = firebase.initializeApp(config);\nexport const firebaseDatabase = firebase.database();","import { firebaseDatabase } from \"../utils/firebaseUtils\";\n\nexport default class FirebaseService {\n  static getDataList = (nodePath, callback, size = 10) => {\n    let query = firebaseDatabase.ref(nodePath).limitToLast(size);\n    query.on(\"value\", (dataSnapshot) => {\n      let items = [];\n      dataSnapshot.forEach((childSnapshot) => {\n        let item = childSnapshot.val();\n        item[\"key\"] = childSnapshot.key;\n        items.push(item);\n      });\n      callback(items);\n    });\n\n    return query;\n  };\n  static pushData = (node, objToSubmit) => {\n    const ref = firebaseDatabase.ref(node).push();\n    const id = firebaseDatabase.ref(node).push().key;\n    ref.set(objToSubmit);\n    return id;\n  };\n  static remove = (id, node) => {\n    return firebaseDatabase.ref(node + \"/\" + id).remove();\n  };\n}\n","export const urls = {\n  home: { name: \"Home\", path: \"/react-app\" },\n  data: { name: \"Data\", path: \"/react-app/data\" },\n  add: { name: \"Add\", path: \"/react-app/add\" },\n};\nexport const privateUrls = {\n  edit: {\n    name: \"Edit\",\n    path: \"/react-app/edit/:id\",\n    pathWithouParam: \"/react-app/edit/\",\n  },\n};\n","import React from \"react\";\nimport {\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"material-ui\";\nimport FirebaseService from \"../../services/FirebaseService\";\nimport { Link } from \"react-router-dom\";\nimport { privateUrls } from \"../../utils/urlUtils\";\n\nexport const DataTable = ({ data }) => {\n  const remove = (id) => {\n    FirebaseService.remove(id, \"leituras\");\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"headline\" component=\"h2\">\n        Data\n      </Typography>\n      <Table selectable=\"false\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Key</TableCell>\n            <TableCell>Temperature</TableCell>\n            <TableCell>Humidity</TableCell>\n            <TableCell>Client</TableCell>\n            <TableCell>Data</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((item, index) => (\n            <TableRow key={index}>\n              <TableCell>{item.key}</TableCell>\n              <TableCell>{item.temperatura}</TableCell>\n              <TableCell>{item.umidade}</TableCell>\n              <TableCell>{item.cliente}</TableCell>\n              <TableCell>{item.data}</TableCell>\n              <TableCell>\n                <Button onClick={() => remove(item.key)}>Remove</Button>\n                <Button\n                  component={(props) => (\n                    <Link\n                      to={privateUrls.edit.pathWithouParam + item.key}\n                      {...props}\n                    />\n                  )}\n                >\n                  {\" \"}\n                  Edit{\" \"}\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n","import { urls } from \"../../utils/urlUtils\";\nimport { Button, Typography } from \"material-ui\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Welcome = () => {\n  return (\n    <React.Fragment>\n      <Typography variant=\"headline\" component=\"h2\">\n        Welcome\n      </Typography>\n      {Object.values(urls).map((url, index) => {\n        return (\n          <Button\n            raised\n            key={index}\n            component={(props) => <Link to={url.path} {...props} />}\n          >\n            {url.name}\n          </Button>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n","import { Button, TextField, Typography } from \"material-ui\";\nimport React, { Component } from \"react\";\nimport FirebaseService from \"../../services/FirebaseService\";\nimport { urls } from \"../../utils/urlUtils\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Add extends Component {\n  state = { id: null, temperatura: \"\", umidade: \"\", data: \"\", cliente: \"\" };\n\n  componentWillMount = () => {\n    const { id } = this.props.match.params;\n\n    if (!(id === undefined || !id)) {\n      this.setState({ id });\n      FirebaseService.getUniqueDataBy(\"leituras\", id, (data) =>\n        this.setState({ ...data }, () => console.log(this.state))\n      );\n    }\n  };\n\n  submit = (event) => {\n    event.preventDefault();\n\n    const { temperatura } = this.state;\n    const { umidade } = this.state;\n    const { data } = this.state;\n    const { cliente } = this.state;\n\n    let objToSubmit = {\n      temperatura,\n      umidade,\n      data,\n      cliente,\n    };\n\n    if (this.props.match.params.id === undefined) {\n      FirebaseService.pushData(\"leituras\", objToSubmit);\n    } else {\n      FirebaseService.updateData(\n        this.props.match.params.id,\n        \"leituras\",\n        objToSubmit\n      );\n    }\n\n    this.props.history.push(urls.data.path);\n  };\n\n  handleChange = (name) => (event) => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render = () => {\n    return (\n      <React.Fragment>\n        <Typography variant=\"headline\" component=\"h2\">\n          Add New\n        </Typography>\n        <form onSubmit={this.submit}>\n          <TextField\n            className=\"input-field\"\n            type=\"text\"\n            value={this.state.temperatura}\n            label=\"Temperature\"\n            required\n            onChange={this.handleChange(\"temperatura\")}\n          />\n\n          <TextField\n            className=\"input-field\"\n            type=\"text\"\n            label=\"Humidity\"\n            value={this.state.umidade}\n            required\n            onChange={this.handleChange(\"umidade\")}\n          />\n\n          <TextField\n            className=\"input-field\"\n            type=\"text\"\n            label=\"Date\"\n            value={this.state.data}\n            required\n            onChange={this.handleChange(\"data\")}\n          />\n\n          <TextField\n            className=\"input-field\"\n            type=\"email\"\n            label=\"Client\"\n            value={this.state.cliente}\n            required\n            onChange={this.handleChange(\"cliente\")}\n          />\n\n          <Button\n            type=\"submit\"\n            style={{ marginTop: \"20px\", display: \"inline-block\" }}\n          >\n            Add\n          </Button>\n        </form>\n      </React.Fragment>\n    );\n  };\n}\n\nexport default withRouter(Add);\n","import { urls } from \"../../utils/urlUtils\";\nimport { AppBar, IconButton, Toolbar, Typography } from \"material-ui\";\nimport MenuIcon from \"material-ui-icons/Menu\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const TopBar = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"Menu\"\n        component={(props) => <Link to={urls.home.path} {...props} />}\n      >\n        <MenuIcon />\n      </IconButton>\n\n      <Typography type=\"title\" color=\"inherit\">\n        My Awesome React App\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { MuiThemeProvider } from \"material-ui/styles/index\";\nimport { AppBar, Toolbar, Typography } from \"material-ui\";\nimport { createMuiTheme } from \"material-ui/styles\";\nimport red from \"material-ui/colors/red\";\nimport { DataTable } from \"../DataTable/DataTable\";\nimport FirebaseService from \"../../services/FirebaseService\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { urls, privateUrls } from \"../../utils/urlUtils\";\nimport { Welcome } from \"../Welcome/Welcome\";\nimport Add from \"../Add/Add\";\nimport { TopBar } from \"./TopBar\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: red,\n  },\n});\nclass App extends Component {\n  state = {\n    data: [],\n  };\n\n  componentDidMount() {\n    FirebaseService.getDataList(\"leituras\", (dataReceived) =>\n      this.setState({ data: dataReceived })\n    );\n  }\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <React.Fragment>\n          <TopBar />\n          <Card style={{ margin: \"50px\" }}>\n            <CardContent>\n              <Route\n                exact\n                path={urls.home.path}\n                render={(props) => <Welcome {...props} />}\n              />\n\n              <Route\n                exact\n                path={urls.data.path}\n                render={(props) => (\n                  <DataTable {...props} data={this.state.data} />\n                )}\n              />\n\n              <Route\n                exact\n                path={urls.add.path}\n                render={(props) => <Add {...props} />}\n              />\n              <Route\n                exact\n                path={privateUrls.edit.path}\n                render={(props) => <Add {...props} />}\n              />\n            </CardContent>\n          </Card>\n        </React.Fragment>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {urls} from \"./utils/urlUtils\";\n\nReactDOM.render(\n  <Router>\n      <Route path={urls.home.path} component={App}/>\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}